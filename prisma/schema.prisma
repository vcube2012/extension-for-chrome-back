generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email                String    @unique
  first_name           String
  last_name            String
  avatar               String?
  password             String
  referrer_id          Int?
  credits              Int       @default(0)
  package_available_to DateTime?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  setting            Setting?
  favoriteAddresses  FavoriteAddress[]
  tagFavoriteAddress TagFavoriteAddress[]
  referrer           User?                @relation("UserRefferals", fields: [referrer_id], references: [id])
  referrals          User[]               @relation("UserRefferals")
  partnerBonuses     ReferralBonus[]      @relation("partner")
  refferalBonuses    ReferralBonus[]      @relation("referral")
  deposits           Deposit[]
  packages           PackageUser[]

  @@index(referrer_id)
  @@map("users")
}

model Package {
  id Int @id @default(autoincrement())

  type          PackageType
  name          String
  credits       Int
  price         Decimal     @default(0) @db.Decimal(10, 2)
  old_price     Decimal?    @db.Decimal(10, 2)
  is_active     Boolean     @default(false)
  is_bestseller Boolean     @default(false)
  advantages    Json?
  sort_order    Int?        @default(0) @db.SmallInt

  created_at DateTime      @default(now())
  updated_at DateTime?     @updatedAt
  users      PackageUser[]
  deposits   Deposit[]

  @@unique([type, name])
  @@map("packages")
}

enum PackageType {
  MONTHLY
  ANNUALLY
}

model PackageUser {
  id         BigInt  @id @default(autoincrement())
  package_id Int
  user_id    Int
  is_active  Boolean @default(true)
  credits    Int

  user    User    @relation(fields: [user_id], references: [id])
  package Package @relation(fields: [package_id], references: [id])

  @@map("package_user")
}

model Metropolitan {
  id Int @id @default(autoincrement())

  code String @unique
  name String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  zipCodes ZipCodesOnMetropolitans[]

  @@map("metropolitans")
}

model State {
  id Int @id @default(autoincrement())

  code String @unique
  name String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  counties County[]

  @@map("states")
}

model County {
  id Int @id @default(autoincrement())

  state_id Int
  code     String @unique
  name     String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  state    State                @relation(fields: [state_id], references: [id], onDelete: Cascade)
  zipCodes ZipCodesOnCounties[]

  @@map("counties")
}

model ZipCode {
  id Int @id @default(autoincrement())

  code  String  @unique
  price Decimal

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  counties      ZipCodesOnCounties[]
  metropolitans ZipCodesOnMetropolitans[]
  addresses     Address[]

  @@map("zip_codes")
}

model ZipCodesOnCounties {
  zip_code_id Int      @map("zip_code_id")
  county_id   Int      @map("county_id")
  created_at  DateTime @default(now())

  zipCode ZipCode @relation(fields: [zip_code_id], references: [id], onDelete: Cascade)
  county  County  @relation(fields: [county_id], references: [id], onDelete: Cascade)

  @@id([zip_code_id, county_id])
  @@map("county_zip_code")
}

model ZipCodesOnMetropolitans {
  zip_code_id     Int
  metropolitan_id Int
  created_at      DateTime @default(now())

  zipCode      ZipCode      @relation(fields: [zip_code_id], references: [id], onDelete: Cascade)
  metropolitan Metropolitan @relation(fields: [metropolitan_id], references: [id], onDelete: Cascade)

  @@id([zip_code_id, metropolitan_id])
  @@map("metropolitan_zip_code")
}

model Setting {
  id Int @id @default(autoincrement())

  user_id Int  @unique
  data    Json

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("settings")
}

model Address {
  id Int @id @default(autoincrement())

  zip_code_id Int
  address     String
  link        String
  info        Json?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  zipCode            ZipCode              @relation(fields: [zip_code_id], references: [id], onDelete: Cascade)
  favoriteAddresses  FavoriteAddress[]
  tagFavoriteAddress TagFavoriteAddress[]

  @@map("addresses")
}

model FavoriteAddress {
  user_id    Int
  address_id Int

  asking   Decimal
  offer    Decimal
  down     Decimal
  cashflow Decimal
  repairs  Decimal

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user    User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address Address              @relation(fields: [address_id], references: [id], onDelete: Cascade)
  tags    TagFavoriteAddress[]

  @@id([user_id, address_id])
  @@map("favorite_addresses")
}

model Tag {
  id Int @id @default(autoincrement())

  name String @unique

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  tagFavoriteAddress TagFavoriteAddress[]

  @@map("tags")
}

model TagFavoriteAddress {
  address_id Int
  user_id    Int
  tag_id     Int

  created_at DateTime @default(now())

  tag             Tag              @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  address         Address          @relation(fields: [address_id], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  favoriteAddress FavoriteAddress? @relation(fields: [user_id, address_id], references: [user_id, address_id], onDelete: Cascade)

  @@id([address_id, user_id, tag_id])
  @@map("tag_favorite_address")
}

model StaticPage {
  id Int @id @default(autoincrement())

  slug    String @unique
  title   String
  content String @db.Text

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("static_pages")
}

model Blog {
  id Int @id @default(autoincrement())

  slug      String  @unique
  title     String
  image     String?
  content   String  @db.Text
  is_active Boolean @default(false)
  likes     Int     @default(0)
  views     Int     @default(0)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("blogs")
}

model Faq {
  id Int @id @default(autoincrement())

  question   String
  answer     String
  sort_order Int    @db.SmallInt

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("faq")
}

model Review {
  id Int @id @default(autoincrement())

  rating     Int    @db.SmallInt
  text       String @db.VarChar(1000)
  author     String @db.VarChar(255)
  sort_order Int    @db.SmallInt

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("reviews")
}

model SiteSetting {
  key String @id

  value Json

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("site_settings")
}

model ReferralBonus {
  id BigInt @id @default(autoincrement())

  type        String
  partner_id  Int
  referral_id Int?
  percent     Int     @db.SmallInt
  amount      Decimal

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  partner  User? @relation("partner", fields: [partner_id], references: [id])
  referral User? @relation("referral", fields: [referral_id], references: [id])

  @@index(partner_id)
  @@index(referral_id)
  @@map("referral_bonuses")
}

model PaymentSystem {
  id Int @id @default(autoincrement())

  name        String  @db.VarChar()
  merchant    String  @unique
  min_deposit Decimal @default(0) @db.Decimal(10, 2)
  is_active   Boolean
  sort_order  Int     @db.SmallInt

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  deposits Deposit[]

  @@map("payment_systems")
}

model Deposit {
  id BigInt @id @default(autoincrement())

  package_id        Int
  user_id           Int
  payment_system_id Int
  type              String  @db.VarChar()
  amount            Decimal @db.Decimal(10, 2)
  status            String  @db.VarChar()
  payment_id        String? @db.VarChar()
  error             String  @db.Text

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user          User          @relation(fields: [user_id], references: [id])
  paymentSystem PaymentSystem @relation(fields: [payment_system_id], references: [id])
  package       Package       @relation(fields: [package_id], references: [id])

  @@index(type)
  @@map("deposits")
}

model Admin {
  id Int @id @default(autoincrement())

  name           String  @db.VarChar(255)
  email          String  @unique
  password       String  @db.VarChar(255)
  remember_token String? @db.VarChar(100)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("admins")
}
