# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface AddressRepoInfoInterface {
  beds: Int
  baths: Int
  square: Float
}

interface PurchaseRange {
  from: Float
  to: Float
}

interface Mortgage {
  down_payment: Float
  interest_rate: Float
  loan_term: Float
  closing_costs: Float
}

interface Expenses {
  property_taxes: Float
  insurance: Float
  hoa_fee: Float
  management: Float
  maintenance: Float
  vacancy: Float
}

type TokenResponse {
  token: String!
}

type PaymentUrlResponseEntity {
  url: String!
  txid: String
}

type ZipCodeEntity {
  id: ID!
  code: String!
  price: Float!
  created_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginationMeta {
  currentPage: Int!
  lastPage: Int!
  total: Int!
  perPage: Int!
  count: Int!
  hasMorePages: Boolean!
}

type AddressEntityInfo {
  beds: Int
  baths: Int
  square: Float
}

type AddressEntity {
  id: ID!
  zip_code_id: Int!
  address: String!
  link: String!
  created_at: DateTime!
  updated_at: DateTime
  info: AddressEntityInfo!
}

type TagEntity {
  id: ID!
  name: String!
  created_at: DateTime!
}

type FavoriteAddressEntity {
  created_at: DateTime!
  updated_at: DateTime
  asking: Float!
  offer: Float!
  down: Float!
  cashflow: Float!
  repairs: Float!
  address: AddressEntity
  tags: [TagEntity!]!
}

type PaginatedFavoriteAddresses {
  data: [FavoriteAddressEntity!]!
  meta: PaginationMeta!
}

type SettingDataExpenses {
  property_taxes: Float
  insurance: Float
  hoa_fee: Float
  management: Float
  maintenance: Float
  vacancy: Float
}

type SettingDataMortgage {
  down_payment: Float
  interest_rate: Float
  loan_term: Float
  closing_costs: Float
}

type SettingDataPurchaseRange {
  from: Float
  to: Float
}

type EntitySettingData {
  use_loan: Boolean!
  purchase_range: SettingDataPurchaseRange!
  mortgage: SettingDataMortgage!
  expenses: SettingDataExpenses!
}

type SettingEntity {
  data: EntitySettingData
}

type ReferralEntity {
  id: Int!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  avatar: String
  credits: Float!
  package_available_to: DateTime
  created_at: DateTime!
}

type PartnerEntity {
  id: Int!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  avatar: String
  credits: Float!
  package_available_to: DateTime
  created_at: DateTime!
}

type ReferralBonusEntity {
  id: ID!
  type: ReferralBonusType!
  percent: Int!
  amount: Float!
  created_at: DateTime!
  partner: PartnerEntity!
  referral: ReferralEntity
}

enum ReferralBonusType {
  COMMISSION
  WITHDRAWAL
}

type PartnerStatisticsEntity {
  balance: Float!
  totalEarnings: Float!
  referralsCount: Int!
}

type PaginatedReferralBonuses {
  data: [ReferralBonusEntity!]!
  meta: PaginationMeta!
}

type DepositEntity {
  id: ID!
  type: DepositType!
  amount: Float!
  status: DepositStatus!
  payment_id: String
  error: String
  created_at: DateTime!
}

enum DepositType {
  NEW
  RENEW
}

enum DepositStatus {
  SUCCESS
  WAITING
  FAILED
}

type PaginatedDeposits {
  data: [DepositEntity!]!
  meta: PaginationMeta!
}

type PackageEntity {
  id: ID!
  type: PackageType!
  name: String!
  credits: Int!
  price: Float!
  old_price: Float
  is_active: Boolean!
  is_bestseller: Boolean!
  advantages: [String!]!
  created_at: DateTime!
}

enum PackageType {
  MONTHLY
  ANNUALLY
}

type PackageUserEntity {
  id: ID!
  package_id: Int!
  user_id: Int!
  is_active: Boolean!
  credits: Int!
  package: PackageEntity!
  user: UserEntity!
}

type UserEntity {
  id: Int!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  avatar: String
  credits: Float!
  package_available_to: DateTime
  created_at: DateTime!
  setting: SettingEntity
  referrer: PartnerEntity
  referrals: [ReferralEntity!]!
  deposits: [DepositEntity!]!
  currentPackage: PackageEntity
  userPackages: [PackageUserEntity!]!
}

type StaticPageEntity {
  id: ID!
  slug: String!
  title: String!
  content: String!
  created_at: DateTime!
}

type BlogEntity {
  id: ID!
  slug: String!
  title: String!
  image: String
  content: String!
  likes: Int!
  views: Int!
  created_at: DateTime!
}

type PaginatedBlogs {
  data: [BlogEntity!]!
  meta: PaginationMeta!
}

type FaqEntity {
  id: Float!
  question: String!
  answer: String!
  created_at: DateTime!
}

type ReviewEntity {
  id: ID!
  author: String!
  text: String!
  created_at: DateTime!
}

type VideoMainPageEntity {
  key: String!
  created_at: DateTime!
  value: String!
}

type PartnerBonusEntity {
  key: String!
  created_at: DateTime!
  value: Int!
}

type PaymentSystemEntity {
  id: ID!
  name: String!
  merchant: String!
  min_deposit: Float!
  is_active: Boolean!
  is_card: Boolean!
  sort_order: Int!
  created_at: DateTime!
}

type Query {
  getGoogleAuthUrl: String!
  findManyZipCodes(input: ZipCodesInput!): [ZipCodeEntity!]!
  findOneZipCode(input: ZipCodeInput!): ZipCodeEntity
  getFavorites(input: GetFavoritesInput!): PaginatedFavoriteAddresses!
  getProfile: UserEntity
  getTags: [TagEntity!]!
  findAllPackages: [PackageEntity!]!
  findAllStaticPages: [StaticPageEntity!]!
  getBlogs(input: PaginateBlogsInput!): PaginatedBlogs!
  findBlog(input: FindBlogInput!): BlogEntity
  getFaq: [FaqEntity!]!
  findReviews: [ReviewEntity!]!
  getMainPageVideo: VideoMainPageEntity
  getPartnerBonus: PartnerBonusEntity
  getReferralBonuses(input: PaginationInput!): PaginatedReferralBonuses!
  getPartnerStatistics: PartnerStatisticsEntity!
  getPaymentsHistory(input: PaginationInput!): PaginatedDeposits!
  getAllPaymentSystems: [PaymentSystemEntity!]!
}

input ZipCodesInput {
  codes: [String!]!
}

input ZipCodeInput {
  code: String!
}

input GetFavoritesInput {
  page: Int! = 1
  perPage: Int! = 10
  search: String
  sorting: GetFavoritesSorting
}

input GetFavoritesSorting {
  column: GetFavoritesSortingColumn! = LATEST
  direction: SortingEnum! = DESC
}

enum GetFavoritesSortingColumn {
  ADDRESS
  LATEST
  ASKING
  OFFER
  DOWN
  CASHFLOW
  REPAIRS
}

enum SortingEnum {
  ASC
  DESC
}

input PaginateBlogsInput {
  page: Int! = 1
  perPage: Int! = 3
}

input FindBlogInput {
  slug: String!
}

input PaginationInput {
  page: Int! = 1
  perPage: Int! = 10
}

type Mutation {
  socialSignIn(input: SocialSignInInput!): TokenResponse!
  payWithPaymentPage(input: MakeDepositInput!): PaymentUrlResponseEntity!
  payWithBankCard(input: MakeDepositUsingCardInput!): String!
  addAddressToFavorite(input: AddToFavoriteInput!): FavoriteAddressEntity!
  removeFromFavorites(input: RemoveFromFavoritesInput!): FavoriteAddressEntity
  updateSetting(input: UpdateSettingInput!): SettingEntity!
  addTag(input: SaveTagsInput!): [TagEntity!]!
  likeBlog(input: FindBlogInput!): Int
  unlikeBlog(input: FindBlogInput!): Int
}

input SocialSignInInput {
  code: String!
  type: SocialAuthType! = GOOGLE
}

enum SocialAuthType {
  GOOGLE
}

input MakeDepositInput {
  payment_system_id: Int!
  package_id: Int!
}

input MakeDepositUsingCardInput {
  payment_system_id: Int!
  package_id: Int!
  holder: String!
  pan: String!
  expMonth: String!
  expYear: Float!
  cvv: Float!
}

input AddToFavoriteInput {
  address: AddressInput!
  prices: FavoriteAddressPricesInput!
}

input AddressInput {
  address: String!
  link: String!
  zipCode: String!
  info: AddressInputInfo!
}

input AddressInputInfo {
  beds: Int = null
  baths: Int = null
  square: Float = null
}

input FavoriteAddressPricesInput {
  asking: Float = null
  offer: Float = null
  down: Float = null
  cashflow: Float = null
  repairs: Float = null
}

input RemoveFromFavoritesInput {
  address_id: Int!
}

input UpdateSettingInput {
  data: UpdateSettingData!
}

input UpdateSettingData {
  use_loan: Boolean! = false
  purchase_range: UpdateSettingDataPurchaseRange!
  mortgage: UpdateSettingDataMortgage!
  expenses: UpdateSettingDataExpenses!
}

input UpdateSettingDataPurchaseRange {
  from: Float = null
  to: Float = null
}

input UpdateSettingDataMortgage {
  down_payment: Float = null
  interest_rate: Float = null
  loan_term: Float = null
  closing_costs: Float = null
}

input UpdateSettingDataExpenses {
  property_taxes: Float = null
  insurance: Float = null
  hoa_fee: Float = null
  management: Float = null
  maintenance: Float = null
  vacancy: Float = null
}

input SaveTagsInput {
  address_id: Int!
  tags: [String!]!
}